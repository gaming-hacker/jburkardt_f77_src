14 October   2011   9:55:55.647 AM      
 
ZIGGURAT_OPENMP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        1
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1863796367   -1863796367             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.990050E-01    0.997112E-01
      RATE:   101.005         100.290    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.660512E-01    0.660512E-01     0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.121570        0.119837    
      RATE:   82.2571         83.4466    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.326194       -0.326194         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.260356        0.260443    
      RATE:   38.4089         38.3961    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.351739        0.351739         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.298151        0.268195    
      RATE:   33.5401         37.2863    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
14 October   2011   9:55:57.182 AM      
14 October   2011   9:55:57.185 AM      
 
ZIGGURAT_OPENMP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        2
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    1249912034    1249912034             0
         1     503020437     503020437             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.999742E-01    0.522890E-01
      RATE:   100.026         191.245    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.791018        0.791018         0.00000    
         1    0.617119        0.617119         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.121623        0.650671E-01
      RATE:   82.2213         153.688    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.977730        0.977730         0.00000    
         1    -1.07051        -1.07051         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.260644        0.135814    
      RATE:   38.3665         73.6301    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0     1.73583         1.73583         0.00000    
         1    0.502068        0.502068         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.299676        0.139120    
      RATE:   33.3694         71.8803    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
14 October   2011   9:55:58.360 AM      
14 October   2011   9:55:58.362 AM      
 
ZIGGURAT_OPENMP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        4
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1669655539   -1669655539             0
         1     108105747     108105747             0
         2   -1587791136   -1587791136             0
         3    1909075432    1909075432             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.992401E-01    0.313089E-01
      RATE:   100.766         319.398    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.111253        0.111253         0.00000    
         1    0.525170        0.525170         0.00000    
         2    0.130314        0.130314         0.00000    
         3    0.944491        0.944491         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.121259        0.373921E-01
      RATE:   82.4681         267.436    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.828252       -0.828252         0.00000    
         1    0.314686        0.314686         0.00000    
         2   -0.989801       -0.989801         0.00000    
         3    -1.48772        -1.48772         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.260343        0.854361E-01
      RATE:   38.4109         117.047    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.129717        0.129717         0.00000    
         1    0.439901        0.439901         0.00000    
         2    0.834098        0.834098         0.00000    
         3    0.973891        0.973891         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.296940        0.934069E-01
      RATE:   33.6768         107.058    
 
ZIGGURAT_OPENMP:
  Normal end of execution.
 
14 October   2011   9:55:59.390 AM      
