25 June      2010   9:51:56.581 AM      
 
ZIGGURAT_OPEN_MP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        1
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1863796367   -1863796367             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.639031E-01    0.496941E-01
      RATE:   156.487         201.231    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.660512E-01    0.660512E-01     0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.464201E-01    0.463130E-01
      RATE:   215.424         215.922    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.326194       -0.326194         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.840828E-01    0.840631E-01
      RATE:   118.930         118.958    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        1
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.351739        0.351739         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.606821E-01    0.627470E-01
      RATE:   164.793         159.370    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June      2010   9:51:57.105 AM      
25 June      2010   9:51:57.216 AM      
 
ZIGGURAT_OPEN_MP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        2
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    1249912034    1249912034             0
         1     503020437     503020437             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.638258E-01    0.323522E-01
      RATE:   156.676         309.098    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.791018        0.791018         0.00000    
         1    0.617119        0.617119         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.508659E-01    0.231681E-01
      RATE:   196.595         431.628    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.977730        0.977730         0.00000    
         1    -1.07051        -1.07051         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.840871E-01    0.430529E-01
      RATE:   118.924         232.272    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        2
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0     1.73583         1.73583         0.00000    
         1    0.502068        0.502068         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.643721E-01    0.314019E-01
      RATE:   155.347         318.452    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June      2010   9:51:57.621 AM      
25 June      2010   9:51:57.640 AM      
 
ZIGGURAT_OPEN_MP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        4
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0   -1669655539   -1669655539             0
         1     108105747     108105747             0
         2   -1587791136   -1587791136             0
         3    1909075432    1909075432             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.404952E-01    0.104940E-01
      RATE:   246.943         952.926    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.111253        0.111253         0.00000    
         1    0.525170        0.525170         0.00000    
         2    0.130314        0.130314         0.00000    
         3    0.944491        0.944491         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.466080E-01    0.119281E-01
      RATE:   214.556         838.358    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0   -0.828252       -0.828252         0.00000    
         1    0.314686        0.314686         0.00000    
         2   -0.989801       -0.989801         0.00000    
         3    -1.48772        -1.48772         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.844212E-01    0.768089E-01
      RATE:   118.454         130.193    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        4
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.129717        0.129717         0.00000    
         1    0.439901        0.439901         0.00000    
         2    0.834098        0.834098         0.00000    
         3    0.973891        0.973891         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.609131E-01    0.301111E-01
      RATE:   164.168         332.104    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June      2010   9:51:58.013 AM      
25 June      2010   9:51:58.069 AM      
 
ZIGGURAT_OPEN_MP:
  FORTRAN77 version
  The number of processors =        8
  The number of threads    =        8
 
TEST01
  SHR3 computes random integers.
  Since the output is completely determined
  by the input value of SEED, we can run in
  parallel as long as we make an array of seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential      Parallel    Difference
 
         0    2066176573    2066176573             0
         1   -1303848666   -1303848666             0
         2     167050157     167050157             0
         3     412856606     412856606             0
         4    -541773661    -541773661             0
         5    -189888513    -189888513             0
         6    -435391081    -435391081             0
         7    1328385438    1328385438             0
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.425410E-01    0.541115E-02
      RATE:   235.067         1848.04    
 
TEST02
  R4_UNI computes uniformly random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED, we can run in
  parallel as long as we make an array of 
  seeds.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.981069        0.981069         0.00000    
         1    0.196424        0.196424         0.00000    
         2    0.538894        0.538894         0.00000    
         3    0.596126        0.596126         0.00000    
         4    0.373859        0.373859         0.00000    
         5    0.455788        0.455788         0.00000    
         6    0.398628        0.398628         0.00000    
         7    0.809289        0.809289         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.490301E-01    0.611210E-02
      RATE:   203.956         1636.10    
 
TEST03
  R4_NOR computes normal random single 
  precision real values.  Since the output 
  is completely determined by the
  input value of SEED and the tables, we 
  can run in  parallel as long as we 
  make an array of seeds and share the 
  tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    -1.33701        -1.33701         0.00000    
         1     1.76707         1.76707         0.00000    
         2    0.673030        0.673030         0.00000    
         3   -0.489069E-01   -0.489069E-01     0.00000    
         4   -0.393083       -0.393083         0.00000    
         5   -0.447175       -0.447175         0.00000    
         6   -0.819305E-01   -0.819305E-01     0.00000    
         7   -0.861219       -0.861219         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.861020E-01    0.671561E-01
      RATE:   116.141         148.907    
 
TEST04
  R4_EXP computes exponential random single 
  precision real values.  Since the output 
  is completely determined by the 
  input value of SEED and the tables, we can 
  run in parallel as long as we make
  an array of seeds and share the tables.

  The number of threads is        8
 
  Correctness check:
 
  Computing values sequentially should reach
  the same result as doing it in parallel:
 
    THREAD    Sequential        Parallel      Difference
 
         0    0.445202        0.445202         0.00000    
         1    0.451912        0.451912         0.00000    
         2    0.355638        0.355638         0.00000    
         3    0.743365        0.743365         0.00000    
         4     1.85271         1.85271         0.00000    
         5    0.674086        0.674086         0.00000    
         6    0.810988        0.810988         0.00000    
         7    0.686205        0.686205         0.00000    
 
  Efficiency check:
 
  Computing values in parallel should be faster.
 
              Sequential      Parallel
 
      TIME:  0.642180E-01    0.303359E-01
      RATE:   155.719         329.642    
 
ZIGGURAT_OPEN_MP:
  Normal end of execution.
 
25 June      2010   9:51:58.490 AM      
